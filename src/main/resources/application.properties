spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/test?createDatabaseIfNotExist=true
spring.jpa.hibernate.ddl-auto= update
spring.datasource.username=root
spring.datasource.password=root@123
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#The simplest way to dump the queries to standard out is to add the following to application.properties:
spring.jpa.show-sql=true

#JPA has features for DDL generation, and these can be set up to run on startup against the database. This is controlled through
#two external properties:
#spring.jpa.generate-ddl (boolean) switches the feature on and off and is vendor independent.
#spring.jpa.hibernate.ddl-auto (enum) is a Hibernate feature that controls the behavior in a more fine-grained way. See below for more detail.
#spring.jpa.generate-ddl=true


#By default, data.sql scripts get executed before the Hibernate is initialized. We need Hibernate to create our tables
#before inserting the data into them. To achieve this, we need to defer the initialization of our data source.
#We?ll use the below property to achieve this:
#spring.jpa.defer-datasource-initialization=true

#When we run the project with this file on the classpath, Spring will pick it up and use it to populate the country table.
#Please note that for any script-based initialization, i.e. inserting data via data.sql or creating schema via schema.sql
#we need to set the below property:
#spring.sql.init.mode=always
#check this link: https://github.com/RaviSourav/SPRINGCRUD1/blob/main/src/main/resources/application.properties

